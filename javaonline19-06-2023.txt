
		------------ Java Programming -----------

	Excecution Flow of C-CPP and Java Program:
	-------------------------------------------

	language Means?

	programming Language?

				CPU
			_________________________
			|			| ---> Command signals
			|	CU		|
			|_______________________|
	 Input		|			|        Output    
	   [ ]		|	ALU		|   |-->  [ ]
	    | 		|_______________________|   |
	    | 		|			|   |
	    |---------->|	IM		|---|
			|_______________________|
				^	|
			________|_______V_________
			|			|
			|	EM		|
			|_______________________|
 


		     BASIC 
		     COBOL						       |--> Sun Microsystem(Now Oracle) -> Java
	Assembly --> ForTran --> ALGOL60 --> CPL --> BCPL --> B --> C==>C++ ---|--> Microsoft Corpo.-> .Net
	(Up,UC)	     RPG						       |--> ....
		     SIMULA
		     ....


	C and C++ Programming					Java Programming

	Instructions		Program Name			Instructions 		Program Name
		|_________________|					|__________________|
			|							  |
			|							  |
	source code   *.c / *.cpp						*.java
			|							  |
			|							  |
		  c/cpp Compiler					    Java Compiler			Compilation
			|							(javac)
			|							  |
	backup file   *.bak						      *.class
			|						      (Byte Code)
			|							  |
	Linker -------->|					-----------------------------------
			|					|		|		|
			|				      Windows          MAC            Linux..
	Object code   *.obj					|		|		|
	file		|				       JVM	       JVM             JVM  		Interpretation
			|					|		|		|
	Executable    *.exe 				   Native code     Native code       Native code	
	file		|					|		|		|
		       Run				     Output	    Output	      Output
			|
		     Output


	Platform Dependent Code						Platform Independent Code

					platform = OS + Processor Artec.


 How To Write a java code? and Where?
 ------------------------------------

	- Editor - Notepad, Editplus, Notepad++ ....
	- IDE    - Netbeans, Eclipse, Intellijidea ....

	Bydefault Java does not provides any editor

How to Download and install Java?
----------------------------------

	- open https://www.oracle.com/in/java/technologies/downloads/#jdk20-windows
	- Install
	- run command on cmd (java -version) to check, it is installed on your PC or not.

Your First Program Using Notepad as an Editor:
-----------------------------------------------

	// Welcome Program

class WelcomeProgram
{
	public static void main(String []args)
	{
		System.out.print("Welcome to Java Programming");
	}
}

 - Compile and execute the java code

	- Open Notepad, Write a code
	- Open the Commant prompt and move to cadebase
	- compile the code using >> javac <prog_nm>.java
	- run the code using >> java <prog_nm>


//-------------------------------------------------------------------------------------------------------------------

- History: Java is devloped by James Gosling


- Applications devloped using java:

	- Standalone applications(Desktop Applications)
	- Web Applications
	- Enterprise Applications
	- Mobile Apps
	- Games
	- Electronic systems and interfacing
	

- Java Version History:

	- 1995 : first version (Alpha and beta)
	- 1996 : JDK 1.0
	- 1997 : JDK 1.1
	- 1998 : J2SE 1.2
	- 2000 : J2SE 1.3
	- 2002 : J2SE 1.4
	- 2004 : J2SE 5.0
	- 2006 : Java SE 6
	- 2011 : Java SE 7
	- 2014 : Java SE 8
	- 2017 : Java SE 9
	.....
	-  March 2023 Now Java SE 20
	-  sept 2023 Now Java SE 21

	
- Java Buzzwords ( Different Features of Java)

	- Simple
	- Platform Independent
	- Object Oriented programming language
	- Secure
	- Architecture netural
	- half compiled and half interpreted language.
	- Robust
	- having high performance
	- Dynamic
	- Multithreaded language
	- Distributed


- Using command line arguments in Java (This is one of the input method in java)

class DemoCmdLn
{
	public static void main(String []args)
	{
		System.out.print(" Demo Command Line Arguments");
	}
}

	- When we execute the code like

		>java DemoCmdLn  will will get output "Demo Command Line Arguments"
		
			in this case main collects NULL.

		But when we execute same code like

		>java DemoCmdLn hello all 20   The array of three strings passed as an argument
					       to main method. and which is collected in []args
					       but will get same output i.e.

						"Demo Command Line Arguments"

		How to access the arguments passed thw command line

	    args   0      1    2
		[hello] [all] [20]     


class DemoCmdLn
{
	public static void main(String []args)
	{
		System.out.print("\n Demo Command Line Arguments");
		System.out.println("\n First String:"+args[0]);
		System.out.println(" Second String:"+args[1]);
		System.out.print(" Third String:"+args[2]);
	}
}

	 // println() is like printf() in C prog. ends with newline character('\n')


//-------------------------------------------------------------------------------------------------------------------


	Character Set: In C --> ASCII Characters are used but Java uses the UNICODE system.

				In C prog. char data type needs only 1 byte. But Java character needs 2 bytes.
				As ASCII is subset of UNICODE, The value of ASCII codes is remains same but
				all are represented in 16 bit.

						in ASCII		      in UNICODE
				 suppose A --> 0010 1101		0000 0000 0010 1101


	Java Tokens: It contains constants, Keyword, identifiers, literals, Operators and Separators. collectively
		     known as Tokens, which acts as building block for java instruction.

			constants: Are the elemrnts having fix value
			Keyword: Reserved words whose meaning is known to compiler.  In java there are 50 keywords.
			identifiers: Name given to any programming element. (i.e. array name, class name, method name...)
			literals: Are the constant value represented in the program

					i.e
						4   -- integer literal
						3.5 -- fractional literal 
						'A' -- character literal
						"hello" -- string literal
						
			operators: are the symbols used to process the data.

			Separators: () [] {} . , ; :
						
			
	Instruction: Command issued to perform a specific task.

	Program: collection of instructions.


//------------------------------------------------------------------------------------------------------

	Data Types in Java: Data type is tool which is used to allocate the memory.

				
						Java
					      Data Types
						  |
				-----------------------------------------
				|					|
			Primitive data types			Non-Primitive data types
				|					|
	 ----------------------------------------		---------------------------------
	 |					|		|	|	|	|	
     Numeric				      boolean	     Array     string  class  interface..	
	|					
  ----------------------- 
  |			|
character 	     integral
 char			|
	------------------------
	|			|
    Integer 		  Fractional
	|			|
	|- byte			|- float
	|- short		|- double
	|- int
	|- long
	


 These data type are used in the type decl. instruction to know about the memory need.
 
	int x;		short a,b,c;	float f1=3.4f;		double d1=4.5,d2=632.67		char ch='D";	long v1=48l 
					or float f1=3.4F;							or long v1=48L


	// WAP to init different variables and display their values.

class DemoVarDecl
{
	public static void main(String []args)
	{
		int x=459;		
		short a=10;	
		long b=67L;
		float f1=3.4f;		
		double d1=4.5,d2=632.67;	
		char ch='D';

		System.out.println("value of x is: "+x);
		System.out.println("a="+a+"\t b="+b);
		System.out.println("f1 is "+f1+"\t d1 is "+d1+"\t d2 is "+d2);
		System.out.println("Character is: "+ch);					
	}
}

Output of above program:

value of x is: 459
a=10     b=67
f1 is 3.4        d1 is 4.5       d2 is 632.67
Character is: D



// Different ways of taking the data from outside world

	
	1. using the command line arguments

class InputCmdLn
{
	public static void main(String []args)
	{
		String s1="", s2="";
		
		s1=args[0];
		s2=args[1];

		System.out.println("S1 is: "+s1);
		System.out.println("S2 is: "+s2);
	}
}


	// Using command line arguments to input the numeric values


class InputCmdLn1
{
	public static void main(String []args)
	{
		int x;
		double y;
		
		x=Integer.parseInt(args[0]);			
		y=Double.parseDouble(args[1]);

		System.out.println("x is: "+x);
		System.out.println("y is: "+y);

		System.out.println("x is: "+(x+10));
		System.out.println("y is: "+(y+10));
	}
}



//--------------------------------------------------------------------------------------------------------------

	
	int x=10;		class Integer				Byte, Short, Long, Float, Double
				{					Character, String
	x				int xxx;
	[ 10 ]				.......
					static int parseInt(String ...)		class String
					{					{
					     ....					char ..[];
					     return <int_val>;				...
					}						<methods>
				}						}


				Integer.parseInt(args[0])



	folder containing all above classes named (lang), Technically it is known as package
	there are some other packages e.g. awt, io, swing.....

	all these packages are sub-folders of main folder named java

					java
					  |
			----------------------------------------
			|	|	|	|	|
		       lang    io      awt	swing  .....


import java.lang.String;	OR	import java.lang.*; [ Actually we are not importing lang package]
import java.lang.System;				    [ because it is imported bydefault          ]
class xxxx
{
	public static void main(String []args)
	{
		System.out. xxxxx
	}
}


 /// Another way of taking input - using keyboard 
 //  (Here Try catch block is used to remove the error doue to readline() method)

// WAP to input one integer and one double value using keyboard and just display both the values.

import java.io.BufferedReader;
import java.io.InputStreamReader;
class InputDemoKB
{	
	public static void main(String []args)
	{
		// allocate the memory to store the data
		int a=0;
		double b=0.0;	
		
		// create the input stream
		InputStreamReader isr=new InputStreamReader(System.in);
		BufferedReader br=new BufferedReader(isr);

		// input the data
		System.out.println("\n Enter the int value: ");
		try{ a=Integer.parseInt(br.readLine()); }catch(Exception e){}

		System.out.println("\n Enter the double value: ");
		try{ b=Double.parseDouble(br.readLine()); }catch(Exception e){}
		
		isr.close();
		br.close();

		System.out.println("a="+a+"\t b="+b);

	}
}

//******


E:\JavaOnlineBatch-19-06-2023\JavaOnlineBatch-19-06-2023\24-06-2023>javac InputDemoKB.java
InputDemoKB.java:17: error: unreported exception IOException; must be caught or declared to be thrown
                a=Integer.parseInt(br.readLine());
                                              ^
InputDemoKB.java:20: error: unreported exception IOException; must be caught or declared to be thrown
                b=Double.parseDouble(br.readLine());
                                                ^
2 errors

E:\JavaOnlineBatch-19-06-2023\JavaOnlineBatch-19-06-2023\24-06-2023>javac InputDemoKB.java
InputDemoKB.java:17: error: cannot find symbol
                try{ a=Integer.parseInt(br.readLine()); }catch(Exeception e){}
                                                               ^
  symbol:   class Exeception
  location: class InputDemoKB
InputDemoKB.java:20: error: cannot find symbol
                try{ b=Double.parseDouble(br.readLine()); }catch(Exeception e){}
                                                                 ^
  symbol:   class Exeception
  location: class InputDemoKB
2 errors

E:\JavaOnlineBatch-19-06-2023\JavaOnlineBatch-19-06-2023\24-06-2023>javac InputDemoKB.java
InputDemoKB.java:22: error: variable a might not have been initialized
                System.out.println("a="+a+"\t b="+b);
                                        ^
InputDemoKB.java:22: error: variable b might not have been initialized
                System.out.println("a="+a+"\t b="+b);
                                                  ^
2 errors

E:\JavaOnlineBatch-19-06-2023\JavaOnlineBatch-19-06-2023\24-06-2023>javac InputDemoKB.java

E:\JavaOnlineBatch-19-06-2023\JavaOnlineBatch-19-06-2023\24-06-2023>java InputDemoKB

 Enter the int value:
12

 Enter the double value:
5.643
a=12     b=5.643

E:\JavaOnlineBatch-19-06-2023\JavaOnlineBatch-19-06-2023\24-06-2023>



*/

//----------------------------------------------------------------------------------------------------

/*
import java.io.BufferedReader;
import java.io.InputStreamReader;
class InputBRISR
{
	public static void main(String []args)
	{
		int x=0;
		double y=0.0;

		InputStreamReader isr=new InputStreamReader(System.in);
		BufferedReader br=new BufferedReader(isr);

		try
		{ 
			System.out.print("Enter the int value: ");
			x=Integer.parseInt(br.readLine());
			System.out.print("Enter the double value: ");
		 	y=Double.parseDouble(br.readLine()); 

		}
		catch(Exception e)
		{
		}
	
		System.out.print("x: "+x+"\t y: "+y);
	}
}
*/
//-----------------------------------------------------------------------------------------------

import java.io.*;
class InputBRISR
{
	public static void main(String []args) throws Exception
	{
		int x=0;
		double y=0.0;

		InputStreamReader isr=new InputStreamReader(System.in);
		BufferedReader br=new BufferedReader(isr);

		System.out.print("Enter the int value: ");
		x=Integer.parseInt(br.readLine());
		System.out.print("Enter the double value: ");
		y=Double.parseDouble(br.readLine()); 
		System.out.print("x: "+x+"\t y: "+y);

		isr.close();
		br.close();
	}
}
	

//------------------------------------------------------------------------------------------------

	// Operators in java

	1. Assignment operator(=)

		Assigns the constant at it's rh+ or value of bariable at its rh+ or ans of expr
		at its rh+ to variable at left.

		i.e.		x=10;		y=x;		z=x+y;

		the assignment operator can be used in the short hand operation

		x=x+10	<---> x+=10
		x=x*10	<---> x*=10
		.....

class DemoAssign
{
	public static void main(String []args)
	{
		int x,y,z;

		x=10;
		y=x;
		z=x+y;
		System.out.println("\n x="+x+"\t y="+y+"\t z="+z);
		
		x+=10;
		System.out.println("\n Again x="+x);
	}
}

//---------------------------------------------------------------------------------------------------
	
	// Unary Operators (- ++ -- (type) )   [Note that sizeof is absent in java ]

	- The minus operator(-): It will gives the opposite value

		suppose,	x=10;
				y=-x;	// -10 will be assigned to y


	- increament(++) anf decreament(--) operator: Incr operator increases the value of operand by 1
						      and -- operator decreases the value by 1.


		pre					post
		++x	<--->	x=x+1		<--->	x++
		--x	<===>	x=x-1		<===>	x--

		Then what is difference,

		z=++x+y--;	(suppose x=4 and y=9)

		1. operate all pre operators (x become 5)
		2. calc. the basic expr. with current values (z=x+y, so z become 14)
		3. operate all post post operators.

import java.io.BufferedReader;
import java.io.InputStreamReader;
class DemoUnary
{
	public static void main(String []args) throws Exception
	{
		int x=0,y=0,z=0;
		
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));

		System.out.println("\n Enter the values of x and y: ");
		x=Integer.parseInt(br.readLine());
		y=Integer.parseInt(br.readLine());

		z=-x;
		System.out.println("\n values of x="+x+"\t y="+y+"\t z="+z);

		++x;
		y--;
		System.out.println("\n values of x="+x+"\t y="+y+"\t z="+z);

		z=++x+y--;
		System.out.println("\n values of x="+x+"\t y="+y+"\t z="+z);
	}
}			 


//-----------------------------------------------------------------------------------

	- (type): It refers to the type casting. i.e. changing the type of variable
		  only at the time of calculation.



import java.io.BufferedReader;
import java.io.InputStreamReader;
class DemoUnary1
{
	public static void main(String []args) throws Exception
	{
		int x=0,y=0;
		double z=0.0;
		
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));

		System.out.println("\n Enter the values of x and y: ");
		x=Integer.parseInt(br.readLine());
		y=Integer.parseInt(br.readLine());

		z=x/y;	// as int/int the fraction part will be eliminated
		System.out.println("\n ans is: "+z);

		z=(double)x/y;	
		System.out.println("\n ans is: "+z);	

		z=x/(double)y;	
		System.out.println("\n ans is: "+z);	

		z=(double)x/(double)y;	
		System.out.println("\n ans is: "+z);	
	}
}			 

//--------------------------------------------------------------------------------------------------

	// Arithmetic operators (+ - * / %)

	// WAP to cal the simple interst. ( si=(p*r*n)/100 )

	// Using java.util.Scanner to input the data

import java.util.Scanner;
class CalcSI
{
	public static void main(String []args)
	{
		int p=0,n=0;
		double r=0.0, si=0.0;

		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the values of p: ");
		p=sc.nextInt();
		
		System.out.println("Enter the values of r: ");
		r=sc.nextDouble();

		System.out.println("Enter the values of n: ");
		n=sc.nextInt();
		
		si=(p*r*n)/100;
		
		System.out.println("Simple Interst is: "+si);
	}
}


//--------------------------------------------------------------------------------------------------------

import java.util.Scanner;
class DemoArith
{
	public static void main(String []args)
	{
		Scanner sc=new Scanner(System.in);
		
		int a,b;
		double ans;

		System.out.println("Enter the values of a and b: ");
		a=sc.nextInt();
		b=sc.nextInt();

		ans=a+b;
		System.out.println("Addition is: "+ans);

		ans=a-b;
		System.out.println("sub is: "+ans);		

		System.out.println("multi is: "+(a*b));

		System.out.println("div is: "+(a/b));

		ans=(double)a/b;
		System.out.println("div is: "+ans);

		System.out.println("mod is: "+(a%b));
	
	}
}


Note that the / operator return the quocient and the % gives the remainder.
unlike the C Prog, the you can operate the % operator on negative values.
ans the sign of numerator will assigned to final ans

lets see,

class DemoMod
{
	public static void main(String []args)
	{
		int a,b,ans;

		a=-13;
		b=5;
		ans=a%b;
		System.out.println("mod is: "+ans);

		a=13;
		b=-5;
		ans=a%b;
		System.out.println("mod is: "+ans);
	
		a=-13;
		b=-5;
		ans=a%b;
		System.out.println("mod is: "+ans);
	
	}
}

//-----------------------------------------------------------------------------------------

	// Relational Operators: (< <= > >= == !=)
	
		These operstors forms the condition. The ans of condition is
		either true or false. where the true and false are the boolean values.

		i.e.
			if x=5	and y=45;
			
			boolean z=(x<y)	  here the boolen value true is assigned to z

class DemoRel
{
	public static void main(String []args)
	{
		int x=5, y=45;
		boolean b;

		b=(x<y);
		System.out.println(" value of b is: "+b);

		b=(x>y);
		System.out.println(" value of b is: "+b);
		
		b=(x==y);
		System.out.println(" value of b is: "+b);
		
		b=(x!=y);
		System.out.println(" value of b is: "+b);
	}
}

//-------------------------------------------------------------------------------------

	// Logical operators ( && || !) : used to join two or more conditions.


		&& - gives true only when all conditions are true, otherwise false
		|| - gives false only when all conditions false otherwise true

		! -	!(true) means false
			!(false) means true

		
		suppose x=10;	y=12

		(x>y)&&(y<100) ---> false
		(x<y)&&(y<100) ---> true


class DemoLogical 
{
	public static void main(String[] args) 
	{
		int x=10, y=12;
		boolean ans;

		ans=(x>y)&&(y<100);		
		System.out.println("(x>y)&&(y<100) is: "+ans);

		ans=(x<y)&&(y<100);		
		System.out.println("(x<y)&&(y<100) is: "+ans);

		ans=(x>y)||(y<100);		
		System.out.println("(x>y)||(y<100) is: "+ans);

		ans=(x>y)||(y==100);		
		System.out.println("(x>y)||(y==100) is: "+ans);

		ans=!(x>y);		
		System.out.println("!(x>y) is: "+ans);

		ans=!(x<y);		
		System.out.println("!(x>y) is: "+ans);
		
	}
}

//-------------------------------------------------------------------------------------------------------------------------

	// Bitwise operators (& | ^ >> << >>> ): these operators are used to perform the bit-level operations


	suppose,	x=10;		y=12;
		 ( 0000 1010 )		(0000 1100)


		x&y			x|y			x^y	

		1010			1010			1010
		1100			1100			1100
	     -----------            ------------            --------------
		1000			1110			0110

		(8)			 (14)			 (6)


	z=x<<2   refers to shift all bits of x towards left by 2 digits

	(0000 1010) ===> (0010 10--) --> (0010 1000) ===> 40

	
	z=y>>2 refers to shift all bits of y towards right by 2 positions.
	
	(0000 1100) ==> (--00 0011) ==> As number is +ve MSB's are filled with zeros 

	i.e. (0000 0011) ==> 3


	import java.util.Scanner;
class DemoBitOperations 
{
	public static void main(String[] args) 
	{
		int x=0,y=0,z=0;
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the x: ");
		x=sc.nextInt();
		System.out.println("Enter the y: ");
		y=sc.nextInt();

		z=(x&y);
		System.out.println("ANDing is: "+z);

		z=(x|y);
		System.out.println("ORing is: "+z);
		
		z=(x^y);
		System.out.println("XORing is: "+z);

		z=(x<<2);
		System.out.println("x<<2 is: "+z);

		z=(y>>2);
		System.out.println("y>>2 is: "+z);

		y=-12;
		z=(y>>2);
		System.out.println("y>>2 is: "+z);

		y=-12;
		z=(y>>>2);
		System.out.println("y>>>2 is: "+z);
	}
}


//====================================================================================================

	// Conditional operator/ternary operator/if-then-else operator: (?:)

	this is only operatoe which able to take the desicion

	syntax:

		<condi> ?  <True+ part> : <false_part> ;

	/// WAP to find the max from two and three numbers

import java.io.*;
class DemoCondiOpt
{
	public static void main(String []args) throws Exception
	{
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));

		int x=0,y=0,z=0,max2=0,max3=0;

		System.out.println("Enter any first numbers: ");
		x=Integer.parseInt(br.readLine());

		System.out.println("Enter any second numbers: ");
		y=Integer.parseInt(br.readLine());

		System.out.println("Enter any third numbers: ");
		z=Integer.parseInt(br.readLine());

		max2 = (x>y) ? x : y ;
		System.out.println("\n Max2 value is: "+max2);

		max3 = (x>y) ? (x>z)?x:z   :  (y>z) ? y:z ;
		System.out.println("\n max3 is: "+max3);
	}
}

//==========================================================================================================

	// Control Instruction: Control instructions are used to control the execution flow of
				your program. This instruction provides the different control
				statement which are divided into condition control and unconditional
				control statements


						control Statements
							|
				--------------------------------------------------
				|						|
			conditional					un-conditional
				|						|
		---------------------------------			------------------------------------
		|		|		|			|	|	|	           |
	     Decision         loop             case 		     continue  break  labeled break     return
		|               |               |					and
	    - if()	      for()	    switch case				      labeled continue
	    - if() else       while()
	    - Nesting         do while()
	    - ladder 
		
		    	 
	using if(), if() else, nesting of if() else and Ladder: 


	if(<>)			if(<>)
	{			{
		------;
		------;
	}			}
				else
				{


				}
			

	// WAP to find the max from two nos

import java.util.Scanner;
class FindMax
{
	public static void main(String []args)
	{
		int x=0,y=0;

		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the first Number: ");
		x=sc.nextInt();
		System.out.println("Enter the second Number: ");
		y=sc.nextInt();	

		if(x>y)
		{
			System.out.println("value of x "+x+" is max");
		}

		if(y>x)
		{
			System.out.println("value of y "+y+" is max");
		}
	}
}


//--------------------------------------------------------------------------------------------

	// WAP to find the total bill and apply discount of 6% when the total bill greater than 500.

import java.util.Scanner;
class DemoIf
{
	public static void main(String []args)
	{
		double p1,p2,p3,tot,dis=0.0;
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the price of three items: ");
		p1=sc.nextInt();
		p2=sc.nextInt();
		p3=sc.nextInt();

		tot=p1+p2+p3;
		if(tot>500)
		{
			dis=tot*0.06;
		}
		System.out.println(" Total Bill: "+tot);
		System.out.println(" Discount: "+dis);
		System.out.println(" Pay Rs: "+(tot-dis));
	}
}

//--------------------------------------------------------------------------------------------

// WAP to find the total bill and apply discount of 6% when the total bill less than 500 otherwise 12%.

import java.util.Scanner;
class DemoIfElse
{
	public static void main(String []args)
	{
		double p1,p2,p3,tot,dis=0.0;
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the price of three items: ");
		p1=sc.nextInt();
		p2=sc.nextInt();
		p3=sc.nextInt();

		tot=p1+p2+p3;
		if(tot<500)
		{
			dis=tot*0.06;
		}
		else
		{
			dis=tot*0.12;
		}
		System.out.println(" Total Bill: "+tot);
		System.out.println(" Discount: "+dis);
		System.out.println(" Pay Rs: "+(tot-dis));
	}
}

//-----------------------------------------------------------------------------------------------------

	// Using if() else nesting: Using if() and/or if() else within if() and/or if() else.

	// WAP to find the max from three numbers.

import java.io.BufferedReader;
import java.io.InputStreamReader;
class DemoNesting
{
	public static void main(String []args) throws Exception
	{
		int x=0,y=0,z=0;
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		System.out.println("Enter any three nos: ");
		x=Integer.parseInt(br.readLine());
		y=Integer.parseInt(br.readLine());
		z=Integer.parseInt(br.readLine());

		if(x>y)
		{
			if(x>z)
			{
				System.out.println(" x="+x+" is max");
			}
			else
			{
				System.out.println(" z="+z+" is max");
			}
		}
		else
		{
			if(y>z)
			{
				System.out.println(" y="+y+" is max");
			}
			else
			{
				System.out.println(" z="+z+" is max");
			}
		}
	}
}

//----------------------------------------------------------------------------------------------------

	/// Using if() else ladder

	if()
	{
	}
	else if()
	{
	}
	else if()
	{
	}
	else if()
	{
	}
	else 
	{
	}


	/// WAP to input the co-ordinates of point in 2D system and display its location.


				     y Axis (all x cord are 0)
					^
			II		|		I
			(-+)		|	       (++)
					|
					|
					|
					|
		<-----------------------|----------------------------> x Axis
					|(0,0)				(all y cord are 0)
					|
					|
					|
					|
			(--)		|		(+-)
			III		|		IV
					V
					
import java.util.Scanner;
class DemoLadder
{
	public static void main(String []args)
	{
		int x,y;
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the co-ordinates of point: ");
		x=sc.nextInt();
		y=sc.nextInt();

		if(x>0&&y>0)
		{
			System.out.println(" 1st QD");
		}
		else if(x<0&&y>0)
		{
			System.out.println(" 2nd QD");
		}
		else if(x<0&&y<0)
		{
			System.out.println(" 3rd QD");
		}
		else if(x>0&&y<0)
		{
			System.out.println(" 4th QD");
		}
		else if(x!=0&&y==0)
		{
			System.out.println(" On x axis");
		}
		else if(x==0&&y!=0)
		{
			System.out.println(" On y axis");
		}
		else
		{
			System.out.println(" In org");
		}
	}
}

///----------------------------------------------------------------------------------------------

	///	Loops in Java

	1. for()			2. while()			3. do while()

	for(<>;<>;<>)			while(<>)			do
	{				{				{
		---------;			----------;			----------;
		---------;			----------;			----------;
		---------;			----------;			----------;
		---------;			----------;			----------;
	}				}				}while(<>);


	/// WAP to display 1=12 nos using the loops

class DemoFor
{
	public static void main(String []args)
	{
		int i;
		for(i=1;i<=12;i++)
		{
			System.out.println(" "+i);
		}
	}
}

class DemoWhile
{
	public static void main(String []args)
	{
		int i;
		i=1;
		while(i<=12)
		{
			System.out.println(" "+i);
			i++;
		}
	}
}


class DemoDoWhile
{
	public static void main(String []args)
	{
		int i;
		i=1;
		do
		{
			System.out.println(" "+i);
			i++;
		}while(i<=12);
	}
}

//---------------------------------------------------------------------------------------------------

	// WAP to count and display the divisibles of 3 and 5 from a range 2 to 50.

class DemoDiv
{
	public static void main(String []args)
	{
		int no,cnt=0;
		System.out.print("The list of nos which are div by 3 and 5: ");
		for(no=2;no<=50;no++)
		{
			if(no%3==0&&no%5==0)
			{
				System.out.print("\t"+no);
				cnt++;
			}
		}
		System.out.println("\n Count is: "+cnt);
	}
}


//----------------------------------------------------------------------------------

	// WAP to input 10 nos ans add even and odd nos sep.

import java.util.*;
class AddEvenOdd
{
	public static void main(String []args)
	{
		int no,ev=0,od=0;
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter any 10 nos: ");
		for(int i=0;i<10;i++)
		{
			System.out.print("No "+(i+1)+": ");
			no=sc.nextInt();
			if(no%2==0)
			{
				ev=ev+no;
			}
			else
			{
				od=od+no;
			}
		}
		System.out.println("Even Sum: "+ev);
		System.out.println("Odd Sum: "+od);
	}
}

//----------------------------------------------------------------------------------------------

	// WAP to display the number prime or not.

import javax.swing.JOptionPane;
class DemoPrime
{
	public static void main(String []args)
	{
		int no,d,flg=0;
		no=Integer.parseInt(JOptionPane.showInputDialog("Enter the Number: "));
		System.out.println("\n Entered Number: "+no);

		d=2;
		while( d<=(no/2) )
		{
			if(no%d==0)
			{
				flg=1;
				break;
			}
			d++;
		}
		if(flg==0)
			System.out.println("No is Prime");
		else
			System.out.println("No is not Prime");
	}
}


//---------------------------------------------------------------------------------------------


	// Enter a number thw keyboard and just reverse it.

import javax.swing.JOptionPane;
class RevNumber
{
	public static void main(String []args)
	{
		int no=Integer.parseInt(JOptionPane.showInputDialog("Enter any number: "));

		System.out.println("The Enterednumber is: "+no);

		int rem, rev=0;
		while(no!=0)
		{
			rem=no%10;
			rev=(rev*10)+rem;
			no=no/10;
		}
		System.out.println(" The reverse Number is: "+rev);
	}
}


//--------------------------------------------------------------------------------

	// WAP to find the entered number is palindrome or not.

		121 ----> reverse it ----> 121	===> No is palindrome
		458 ----> reverse it ----> 854	===> No is not palindrome

import javax.swing.JOptionPane;
class PalNumber
{
	public static void main(String []args)
	{
		int no=Integer.parseInt(JOptionPane.showInputDialog("Enter any number: "));

		System.out.println("The Enterednumber is: "+no);

		int tmp,rem, rev=0;
		tmp=no;
		while(no!=0)
		{
			rem=no%10;
			rev=(rev*10)+rem;
			no=no/10;
		}

		if(tmp==rev)
		{
			System.out.println(" Number "+rev+" is Palindrome");
		}
		else
		{			
			System.out.println(" Number "+rev+" is not Palindrome");
		}
	}
}

//--------------------------------------------------------------------------------------

	// using the do..while() loop

	// WAP to input one number and just find the max digit from it.

		no=4596 ===> max digit-> 9
		no=3416 ===> max digit-> 6

import java.util.Scanner;
class MaxDigit
{
	public static void main(String []args)
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter any number: ");
		int no=sc.nextInt();

		int rem, md=0;
		do
		{
			rem=no%10;
			if(rem>md)
			{
				md=rem;
			}
			no=no/10;
		}while(no!=0);

		System.out.println("Max digit is "+md);
	}
}

//-----------------------------------------------------------------------------------------------

	// Enter the number thw keyboard and generate the possible max number using its digits.

		496 ===> 964
		39571 --> 97531

import java.util.Scanner;
class GenMax 
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter any number: ");
		int no=sc.nextInt();

		int d,nn=0,rem,tmp;
		tmp=no;
		d=9;
		do
		{
			no=tmp;
			while(no!=0)
			{
				rem=no%10;
				if(rem==d)
				{
					nn=(nn*10)+rem;
				}
				no=no/10;
			}
		}while(--d>=0);

		System.out.println("Possible max: "+nn);
	}
}

//---------------------------------------------------------------------------------------------------------

	// WAP to keep adding the numbers entered thw keyboard till user wants.

import java.util.Scanner;
class AddNos 
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		int no,sum=0;
		char ch;
		do
		{			
			System.out.println("Enter Number: ");
			no=sc.nextInt();
			sum=sum+no;
			
			System.out.println("Press y to continue and n to stop: ");
			sc.nextLine();
			ch=sc.nextLine().charAt(0); // "hello" ---> 'h' and    "y" ---> 'y'
			if(ch!='y')
			{
				break;
			}
		}while(true);
		System.out.println("Sum of all entered nos: "+sum);
	}
}

//------------------------------------------------------------------------------------------------------

	// Using switch() case: 

	syntax:

		switch(<opt>)
		{
			case <CC1>:
				-----------;
				-----------;
				break;
			case <CC2>:
				-----------;
				-----------;
				break;
			case <CC3>:
				-----------;
				-----------;
				break;
			case <CC4>:
				-----------;
				-----------;
				break;
			      .
			      .
			case <CCN>:
				-----------;
				-----------;
				break;
			[<default:>]
				-----------;;
		}


	// WAP using switch() to perform the different arith. operations

import java.util.Scanner;
class DemoSwitch
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		double a,b,ans=0;
		int opt;
		System.out.println("\n ***** Menu ****** ");
		System.out.println(" 1.add \n 2.sub \n 3.multi \n 4.div");
		System.out.println("Choose your option: ");
		opt=sc.nextInt();

		System.out.println("Enter any two nos: ");
		a=sc.nextDouble();
		b=sc.nextDouble();

		switch(opt)
		{
			case 1:
				ans=a+b;
				break;
			case 2:
				ans=a-b;
				break;
			case 3:
				ans=a*b;
				break;
			case 4:
				ans=a/b;
				break;
			default:
				System.out.println("Incorrect Option..!!!");
		}
		System.out.println("Ans is: "+ans);
	}
}

///-------------------------------------------------------------------------------

	// You are allowed to used character options

import java.util.Scanner;
class DemoSwitchCharOpt
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		double a,b,ans=0;
		char opt;
		System.out.println("\n ***** Menu ****** ");
		System.out.println(" p.add \n q.sub \n r.multi \n s.div");
		System.out.println("Choose your option: ");
		opt=sc.nextLine().charAt(0);

		System.out.println("Enter any two nos: ");
		a=sc.nextDouble();
		b=sc.nextDouble();

		switch(opt)
		{
			case 'p':
			case 'P':
				ans=a+b;
				break;
			case 'q':
			case 'Q':
				ans=a-b;
				break;
			case 'r':
			case 'R':
				ans=a*b;
				break;
			case 's':
			case 'S':
				ans=a/b;
				break;
			default:
				System.out.println("Incorrect Option..!!!");
		}
		System.out.println("Ans is: "+ans);
	}
}

//--------------------------------------------------------------------------------

	// Using the switch() within loop

import java.util.Scanner;
class DemoSwitchInCLoop
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		double a,b,ans=0;
		int opt,k=0;
		while(k<3)
		{
			k++;
			System.out.println("\n ***** Menu ****** ");
			System.out.println(" 1.add \n 2.sub \n 3.multi \n 4.div");
			System.out.println("Choose your option: ");
			opt=sc.nextInt();

			System.out.println("Enter any two nos: ");
			a=sc.nextDouble();
			b=sc.nextDouble();

			switch(opt)
			{
				case 1:
					ans=a+b;
					break;
				case 2:
					ans=a-b;
					break;
				case 3:
					ans=a*b;
					break;
				case 4:
					ans=a/b;
					break;
				default:
					System.out.println("Incorrect Option..!!!");
			}
			System.out.println("Ans is: "+ans);
		}
	}
}

//------------------------------------------------------------------------

	// Using the switch() within infinite loop

import java.util.Scanner;
class DemoSwitchInILoop
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		double a,b,ans=0;
		int opt;
		while(true)
		{
			System.out.println("\n ***** Menu ****** ");
			System.out.println(" 1.add \n 2.sub \n 3.multi \n 4.div \n 5.stop");
			System.out.println("Choose your option: ");
			opt=sc.nextInt();

			System.out.println("Enter any two nos: ");
			a=sc.nextDouble();
			b=sc.nextDouble();

			switch(opt)
			{
				case 1:
					ans=a+b;
					break;
				case 2:
					ans=a-b;
					break;
				case 3:
					ans=a*b;
					break;
				case 4:
					ans=a/b;
					break;
				case 5:
					System.exit(0);
			}
			System.out.println("Ans is: "+ans);
		}
	}
}

//------------------------------------------------------------------------------

	// Unconditional control statements

	- break: will terminate the loop unconditionally. And pass the program
		 control out of switch() from case.

     // WAP to Keep on adding the numbers till user will not enter the -ve value.

import java.util.Scanner;
class DemoBreak
{
	public static void main(String []args)
	{
		Scanner sc=new Scanner(System.in);
		int no,add=0;
		while(true)
		{
			System.out.println("Enter any number: ");
			no=sc.nextInt();
			if(no<0)
			{
				break;
			}
			add=add+no;
		}
		System.out.println("ans is "+add);
	}
}

//---------------------------------------------------------------------------

	// continue: It will pass the control to next ineration without executing
		     the remaining body of loop.


class DemoContinue 
{
	public static void main(String[] args) 
	{
		int i,j;
		for(i=0;i<10;i++)
		{
			for(j=0;j<10;j++)
			{
				System.out.print("-");
				if(j>i)
				{
					continue;
				}
				System.out.print("*");
			}
			System.out.println("");
		}
	}
}

//----------------------------------------------------------------------

	// Labeled break and labeled continue

class LblBreakContinue
{
	public static void main(String[] args) 
	{
		int i,j;
		outer:for(i=0;i<10;i++)
		{
			System.out.println("");
			for(j=0;j<10;j++)
			{
				if(i==5)
				{
					break outer;
				}
				System.out.print("-");
				if(j>i)
				{
					continue outer;
				}
				System.out.print("*");
			}
		}
	}
}

//-----------------------------------------------------------------------

	// retrun: pass the control back to calling method from called method

class DemoReturn 
{
	public static void main(String[] args) 
	{
		int i=0;
		System.out.println("Hello World!");
		if(i==0)
			return;
		System.out.println("Hello World again....!!!");
	}
}

//============================================================================

	// Array in Java:

	Array is collection of elementts having same data type. and these are
	conti. arranged in the memory.

	syntax:

	In C					In Java

	<data_type> <ar_nm>[<index>];		<data_type> <ar_nm>[];
	e.g.					or <data_type> []<ar_nm>;
	int x[5];				e.g.
						 int x[];   or  int []x;
	x 0   1   2   3   4			x	
	 [ ] [ ] [ ] [ ] [ ]			 [ ]
	 
	- the decl. allocates the memory	- in java, decl. creates the only 
	  in the c programming			  location to hold reference.
						- to allocate the memory we need
						   memory allocation operator 'new'
						   and can be used as 

						int []x=new int[cnt];

						here cnt is element count, it can 
						be constant also.


// Init array and display it.

class InitArray
{
	public static void main(String []args)
	{
		int x[]={12,34,56,78,2,38};

		System.out.print("Array elements are: ");
		for(int i=0;i<6;i++)
		{
			System.out.print("   "+x[i]);
		}
	}
}


// Note the <ar_nm>.length give the element count in array. so it can be
// used in the condition as


class InitArraySz
{
	public static void main(String []args)
	{
		int x[]={12,34,56,78,2,38};

		System.out.print("Array elements are: ");
		for(int i=0;i<x.length;i++)
		{
			System.out.print("   "+x[i]);
		}
	}
}

//-------------------------------------------------------------------------

	// Input the array elements

	// Using command-line

class ArrayInputCmd
{
	public static void main(String[]args)
	{
		int []ar=new int[args.length];
		
		for(int i=0;i<args.length;i++)
		{
			ar[i]=Integer.parseInt(args[i]);
		}

		System.out.print("\n Elements are: ");
		
		for(int i=0;i<args.length;i++)
		{
			System.out.print("   "+ar[i]);
		}
	}
}


//-----------------------------------------------------------------------

	// Array input having constant size

import java.util.Scanner;
class ArrayInputConstSize
{
	public static void main(String []args)
	{
		int []ar=new int[5];
		Scanner sc=new Scanner(System.in);
	
		System.out.println("Enter any 5 nos: ");
		for(int i=0;i<ar.length;i++)
		{
			ar[i]=sc.nextInt();
		}

		System.out.print("\n Elements are: ");
		for(int i=0;i<5;i++)
		{
			System.out.print("   "+ar[i]);
		}
	}
}

//----------------------------------------------------------------------

	// Array input having size decided at runtime

import java.util.Scanner;
class ArrayInputSizeRt
{
	public static void main(String []args)
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the element count: ");
		int cnt=sc.nextInt();

		int []ar=new int[cnt];
	
		System.out.println("Enter any "+ cnt +" nos: ");
		for(int i=0;i<ar.length;i++)
		{
			ar[i]=sc.nextInt();
		}

		System.out.print("\n Elements are: ");
		for(int i=0;i<cnt;i++)
		{
			System.out.print("   "+ar[i]);
		}
	}
}

//----------------------------------------------------------------------------------------------------------

	// WAP to count the even and odd nos from array

import java.util.Scanner;
class CountEvOdArr
{
	public static void main(String []args)
	{
		Scanner sc=new Scanner(System.in);
		int []ar=new int[7];

		System.out.println("Enter the 7 Nos: ");
		for(int i=0;i<7;i++)
		{
			ar[i]=sc.nextInt();
		}
		int ec=0,oc=0;
		for(int i=0;i<7;i++)
		{
			if(ar[i]%2==0)
				ec++;
			else
				oc++;
		}
		
		System.out.print("Elements are: ");
		for(int i=0;i<7;i++)
		{
			System.out.print("  "+ar[i]);
		}
		System.out.print("\n Even Element count: "+ec);
		System.out.print("\n Odd Element count: "+oc);
	}
}

//--------------------------------------------------------------------------

	// WAP to display the list of prime nos from array

import java.util.Scanner;
class PrimeListArr
{
	public static void main(String []args)
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("\n Enter the element count: ");
		int cnt=sc.nextInt();

		int []ar=new int[cnt];

		System.out.println("Enter the "+cnt+" Nos: ");
		for(int i=0;i<cnt;i++)
		{
			ar[i]=sc.nextInt();
		}
		int no, d, flg=0, pc=0;
		System.out.println("\n Prime nos: ");
		for(int i=0;i<7;i++)
		{
			no=ar[i];
			d=2;
			flg=0;
			while(d<=(no/2))
			{
				if(no%d==0)
				{
					flg=1;
					break;
				}
				d++;
			}
			if(flg==0)
			{
				pc++;
				System.out.println("  "+no);
			}
		}
		System.out.print("\n Prime count: "+pc);
		System.out.print("Elements are: ");
		for(int i=0;i<ar.length;i++)
		{
			System.out.print("  "+ar[i]);
		}
	}
}

//-----------------------------------------------------------------------------

// Enter the array of size 6 thw keyboard and make its 1 copy and 1 reverse copy.

import java.util.Scanner;
class CopyRevCopy
{
	public static void main(String []args)
	{
		Scanner sc=new Scanner(System.in);
		int []ar=new int[6];

		System.out.println("Enter the 6 Nos: ");
		for(int i=0;i<ar.length;i++)
		{
			ar[i]=sc.nextInt();
		}
		
		// copy
		int []x=new int[ar.length];
		for(int i=0;i<ar.length;i++)
		{
			x[i]=ar[i];
		}
		/*
			ar 0    1   2    3     4    5
			 [23] [56] [89] [12] [82] [33]

			 y 0    1    2    3    4    5
			  [33] [82] [12] [89] [56] [23] 
		
		*/
			
		// Reverse copy
		int []y=new int[ar.length];
		for(int i=0;i<ar.length;i++)
		{
			y[i]=ar[5-i];
		}

		
		System.out.print("\n Original array Elements are: ");
		for(int i=0;i<ar.length;i++)
		{
			System.out.print("  "+ar[i]);
		}

		System.out.print("\n Simple Copy: ");
		for(int i=0;i<ar.length;i++)
		{
			System.out.print("  "+x[i]);
		}

		System.out.print("\n Reverse Copy: ");
		for(int i=0;i<ar.length;i++)
		{
			System.out.print("  "+y[i]);
		}
	}
}

//-----------------------------------------------------------------------------

	// WAP to perform the search operation in an array.

import java.util.Scanner;
class DemoSerchArr
{
	public static void main(String []args)
	{
		Scanner sc=new Scanner(System.in);
		int i,no=0;
		int []arr=new int[8];
		
		System.out.println("Enter the 8 elements: ");
		for(i=0;i<arr.length;i++)
		{
			arr[i]=sc.nextInt();
		}

		System.out.println("Enter the no to be searched: ");
		no=sc.nextInt();

		int pos=-1;
		for(i=0;i<arr.length;i++)
		{
			if(arr[i]==no)
			{
				pos=i;
				break;
			}
		}
		if(pos!=-1)
			System.out.println("\n Number is present at "+pos+" Position");
		else
			System.out.println("\n No is not present in an array");
	}
}

//---------------------------------------------------------------------------

	// Write a program to sort an array using any algo.
	// WAP to search second min and second max from array.
























